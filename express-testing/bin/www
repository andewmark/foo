#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('express-testing:server');
var http = require('http');


/**
 * Get port from environment and store in Express.
 */


var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}


// Websocket server
var userData="";
const WebSocket = require('ws');

const wss = new WebSocket.Server({server});


/**
 * Initialize WebSocket connections and handlers
 */
function initializeWebSocket() {
    wss.on('connection', (ws) => {
        console.log('New WebSocket connection!');

        // Send requests to the C++ application
        ws.send(JSON.stringify({ action: 'retrieve_data', params: { key: 'SELECT * FROM listings;' } }));
        ws.send(JSON.stringify({ action: 'retrieve_data', params: { key: 'SELECT * FROM users;' } }));
        ws.send(JSON.stringify({ action: 'retrieve_data', params: { key: 'SELECT * FROM campuses;' } }));

        // Handle incoming messages
        ws.on('message', (message) => {
            try {
                const parsedMessage = JSON.parse(message);
                
                if (parsedMessage.data) {
                    // `data` should be an array
                    const userData = JSON.parse(parsedMessage.data);
                    
                    // Log the parsed user data and its type
                    console.log(userData);
                    console.log(typeof userData);
                    return userData;
                } else {
                    console.error('Received message without data property:', parsedMessage);
                }
            } catch (error) {
                console.error('Error parsing message:', error);
            }
            
        });
        

        // Handle WebSocket connection close
        ws.on('close', () => {
            console.log('WebSocket connection closed');
        });
    });
}

// Export the initialization function for use in other modules
module.exports = initializeWebSocket;



// Handle WebSocket connections


/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

