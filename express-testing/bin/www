#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('express-testing:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */


var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}


// Websocket server
// WebSocket server
const WebSocket = require('ws');

const wss = new WebSocket.Server({ server });


// Handle WebSocket connections
wss.on('connection', (ws) => {
    console.log('New WebSocket connection!!!!');

    // Send a request to the C++ application to get full table of users
    const request = JSON.stringify({ action: 'retrieve_data', params: { key: 'SELECT * FROM users;' } });
    ws.send(request);

    // Handle incoming messages
    ws.on('message', (message) => {
      const parsedMessage = JSON.parse(message);
          
      // Check if the data property exists in the message
      if (parsedMessage && parsedMessage.data) {
          // `data` should be an array
          const userData = JSON.parse(parsedMessage.data);
          // Validate that `userData` is an array
          console.log(userData);
          console.log(typeof(userData));
          // if (Array.isArray(userData)) {
          //     // Iterate over each user object and print it
          //     // userData.forEach((user) => {
          //     console.log(userData);
          //     console.log(typeof(userData));
          //     // });
          } 
          // else {
          //     console.error('Expected an array of users, but received:', userData);
              
          // }
      else {
          console.error('Missing data property in the received message:', parsedMessage);
      }
}); 
        
    ws.on('close', () => {
        console.log('WebSocket connection closed');
    });
});

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
